diff -u -r givaro-3.2.16.orig/src/kernel/integer/givintnumtheo.inl givaro-3.2.16/src/kernel/integer/givintnumtheo.inl
--- givaro-3.2.16.orig/src/kernel/integer/givintnumtheo.inl	2012-08-16 12:54:05.172069495 +0300
+++ givaro-3.2.16/src/kernel/integer/givintnumtheo.inl	2012-08-16 13:32:59.219980507 +0300
@@ -22,8 +22,8 @@
 // =================================================================== //
 template<class RandIter>
 typename IntNumTheoDom<RandIter>::Rep& IntNumTheoDom<RandIter>::phi(Rep& res, const Rep& n) const {
-    if (isleq(n,1)) return res=n;
-    if (isleq(n,3)) return sub(res,n,this->one);
+    if (this->isleq(n,1)) return res=n;
+    if (this->isleq(n,3)) return this->sub(res,n,this->one);
     std::list<Rep> Lf;
     Father_t::set(Lf,n);
     //return phi (res,Lf,n);
@@ -34,11 +34,11 @@
 template<class RandIter>
 template< template<class, class> class Container, template<class> class Alloc>
  typename IntNumTheoDom<RandIter>::Rep& IntNumTheoDom<RandIter>::phi(Rep& res, const Container<Rep, Alloc<Rep> >& Lf, const Rep& n) const {
-    if (isleq(n,1)) return res=n;
-    if (isleq(n,3)) return sub(res,n,this->one);
+    if (this->isleq(n,1)) return res=n;
+    if (this->isleq(n,3)) return this->sub(res,n,this->one);
     res = n; Rep t,m;
     for(typename Container<Rep, Alloc<Rep> >::const_iterator f=Lf.begin(); f!=Lf.end(); ++f) 
-        mul(res, divexact(t,res,*f), sub(m, *f, this->one));
+        this->mul(res, this->divexact(t,res,*f), this->sub(m, *f, this->one));
     return res;
 }
 
@@ -85,26 +85,26 @@
         // n must be in {2,4,p^m,2p^m} where p is an odd prime
         // else infinite loop
 
-    if (isleq(n,4)) return sub(A,n,this->one);
-    if (isZero(mod(A,n,4))) return A=this->zero;
+    if (this->isleq(n,4)) return this->sub(A,n,this->one);
+    if (isZero(this->mod(A,n,4))) return A=this->zero;
     Rep p,ismod2, q, no2, root; 
-    if (isZero(mod(ismod2,n,2))) divexact(no2,n,2); else no2=n;
+    if (isZero(this->mod(ismod2,n,2))) this->divexact(no2,n,2); else no2=n;
     p=no2;
     int k = 1; 
-    while (! isprime(p) ) {
+    while (! this->isprime(p) ) {
         sqrt(root, p);
-        while (mul(q,root,root) == p) {
+        while (this->mul(q,root,root) == p) {
             p = root;
             sqrt(root,p);
         }
-        if (! isprime(p) ) {
+        if (! this->isprime(p) ) {
             q=p;
-            while( p == q ) factor(p, q);
-            divin(q,p);
+            while( p == q ) this->factor(p, q);
+            this->divin(q,p);
             if (q < p) p = q;
         }
     }
-    if (isZero(ismod2)) mul(q,p,2); else q=p;
+    if (isZero(ismod2)) this->mul(q,p,2); else q=p;
     for(;q != n;++k,q*=p);
     Rep phin, tmp; 
     phi(phin,p);
@@ -139,21 +139,21 @@
     while (! found) {
        do {
             this->random(this->_g, A, p);
-            addin( modin(A,sub(tmp,p,7)) , 7);
+            this->addin( this->modin(A,this->sub(tmp,p,7)) , 7);
         } while ( ! isOne(gcd(tmp,A,p)) );
         found = ++runs;
         for(f=Lf.begin();(f!=Lf.end() && found);f++)
             found = (! isOne( this->powmod(tmp,A,*f,p)) );
     }
     if (k == 1) {
-        if (isZero(ismod2) && isZero(mod(ismod2, A, 2)))
+        if (isZero(ismod2) && isZero(this->mod(ismod2, A, 2)))
             return A+=p;
         else
             return A;
     } else {
         if (! is_prim_root(A,no2))
             A+=p;
-        if (isZero(ismod2) && isZero(mod(ismod2, A, 2)))
+        if (isZero(ismod2) && isZero(this->mod(ismod2, A, 2)))
             return A+=no2;
         else
             return A;
@@ -209,18 +209,18 @@
       Lq.pop_back(); 
        this->div(Temp, pmun, Q);
       do {
-          nonzerorandom(this->_g, alea, p);
-          modin(alea, p);
+          this->nonzerorandom(this->_g, alea, p);
+          this->modin(alea, p);
           this->powmod(essai, alea, Temp, p);
 //std::cerr << alea << " should be of order " << Q << " mod " << p << std::endl;
       } while (essai == 1);
 // looking for alea, of order Q with high probability      
       
-      mulin(primroot, essai);
+      this->mulin(primroot, essai);
 
 //  1-(1+2/(p-1))*(1-1/L^2)^log_B(Q)  < 1-(1+2^(-log_2(p)))*(1-1/L^2)^log_B(Q);
       essai = L;
-      mul(Temp, essai, L);
+      this->mul(Temp, essai, L);
       error = 1-1.0/(double)Temp;
       error = power(error, logp(Q,Temp) );
       error *= (1.0+1.0/((double)Q-1.0));
@@ -233,8 +233,8 @@
   for ( ; Lqi != Lq.end(); ++Lqi, ++ei) { 
        this->div(Temp, pmun, *Lqi);
       do {
-          nonzerorandom(this->_g, alea, p);
-          modin(alea, p);
+          this->nonzerorandom(this->_g, alea, p);
+          this->modin(alea, p);
           this->powmod(essai, alea, Temp, p);
 //std::cerr << alea << " should be of order at least " << *Lqi << "^" << *ei << "==" << power(*Lqi,*ei) << " mod " << p << std::endl;
       } while( essai == 1 ) ;
@@ -244,10 +244,10 @@
 //std::cerr << alea << " is of order at least " << (*Lqi) << "^" << (*ei) << "==" << power(*Lqi,*ei) << " mod " << p << std::endl;
           
       this->divin(Temp, power(*Lqi,*ei-1));
-      mulin(primroot, this->powmod(essai, alea, Temp, p));    
+      this->mulin(primroot, this->powmod(essai, alea, Temp, p));    
   }
 
-  modin(primroot, p);
+  this->modin(primroot, p);
   
   return primroot; 
 // return primroot with high probability
@@ -303,7 +303,7 @@
 typename IntNumTheoDom<RandIter>::Rep& IntNumTheoDom<RandIter>::prim_root_of_prime(Rep& A, const Rep& n) const { 
     
     std::vector<Rep> Lf;
-    Rep phin; sub(phin,n,this->one);
+    Rep phin; this->sub(phin,n,this->one);
     Father_t::set(Lf,phin);
     return prim_root_of_prime(A, Lf, phin, n);
 }
@@ -335,14 +335,14 @@
 
     Rep primeorder;
     
-    for(bool exemp = true; exemp; nextprimein(prime) ) {
+    for(bool exemp = true; exemp; this->nextprimein(prime) ) {
         A = prime;
         primeorder = phin;
         for(typename Array::const_iterator f = Lf.begin(); f != Lf.end(); ++f) {
             this->powmod(tmp, prime, this->div(expo, primeorder, *f), n);
             if (isOne(tmp)) {
                 newLf.push_back(*f);
-                while (isZero(mod(tmp,expo,*f)) && isOne( this->powmod(tmp, prime, this->div(temp, expo, *f), n) ) ) { expo = temp; }
+                while (isZero(this->mod(tmp,expo,*f)) && isOne( this->powmod(tmp, prime, this->div(temp, expo, *f), n) ) ) { expo = temp; }
                 primeorder = expo;
 //                 std::cerr << "2 Order (Div): " << primeorder << std::endl;
             } else {
@@ -362,7 +362,7 @@
 //     std::cerr << "Root : " << A << std::endl;
 //     std::cerr << "Order : " << Aorder << std::endl;
     
-    for ( ; islt(Aorder,phin); nextprimein(prime) ) {
+    for ( ; this->islt(Aorder,phin); this->nextprimein(prime) ) {
         newLf.resize(0); oldLf.resize(0);
 
         for(typename Array::const_iterator f = Lf.begin(); f != Lf.end(); ++f) {
@@ -384,9 +384,9 @@
 
             this->powmod(tmp, prime, g, n);
 
-            modin( mulin(A, tmp), n );
+            this->modin( this->mulin(A, tmp), n );
 
-            mulin(Aorder, this->div(tmp, phin, g));
+            this->mulin(Aorder, this->div(tmp, phin, g));
 
             Lf = newLf;
         }
@@ -407,8 +407,8 @@
 typename IntNumTheoDom<RandIter>::Rep& IntNumTheoDom<RandIter>::lowest_prim_root(Rep& A, const Rep& n) const {
         // n must be in {2,4,p^m,2p^m} where p is an odd prime
         // else returns zero
-    if (isleq(n,4)) return sub(A,n,this->one);
-    if (isZero(mod(A,n,4))) return A=this->zero;
+    if (this->isleq(n,4)) return this->sub(A,n,this->one);
+    if (isZero(this->mod(A,n,4))) return A=this->zero;
     Rep phin, tmp; 
     phi(phin,n);
     std::list<Rep> Lf;
@@ -417,15 +417,15 @@
     for(f=Lf.begin();f!=Lf.end();++f)
             this->div(*f,phin,*f);
     int found=0;
-    for(A = 2;(isleq(A,n) && (! found));addin(A,1)) {
+    for(A = 2;(this->isleq(A,n) && (! found));this->addin(A,1)) {
         if (isOne(gcd(tmp,A,n))) {
             found = 1;
             for(f=Lf.begin();(f!=Lf.end() && found);f++)
                 found = (! isOne( this->powmod(tmp,A,*f,n)) );
         }
     }
-    if (isleq(A,n))
-        return subin(A,1);
+    if (this->isleq(A,n))
+        return this->subin(A,1);
     else
         return A=this->zero; 
 }
@@ -439,7 +439,7 @@
     std::list<Rep> Lf;
     Father_t::set(Lf,phin);
     typename std::list<Rep>::iterator f=Lf.begin();
-    Rep A; mod(A,p,n);
+    Rep A; this->mod(A,p,n);
     if (isOne(gcd(tmp,A,n))) {
         found = true;
         for(;(f!=Lf.end() && found);f++) {
@@ -454,13 +454,13 @@
 bool IntNumTheoDom<RandIter>::isorder(const Rep& g, const Rep& p, const Rep& n) const {
         // returns 1 if p is of order g in Z/nZ
     Rep tmp;
-    return (isOne( this->powmod(tmp, p, g, n) ) && areEqual( g, order(tmp,p,n) ) );
+    return (isOne( this->powmod(tmp, p, g, n) ) && this->areEqual( g, order(tmp,p,n) ) );
 }
 
 template<class RandIter>
 typename IntNumTheoDom<RandIter>::Rep& IntNumTheoDom<RandIter>::order(Rep& g, const Rep& p, const Rep& n) const {
         // returns 0 if failed
-    Rep A; mod(A,p,n);
+    Rep A; this->mod(A,p,n);
     if (isZero(A))
 	return g = this->zero;
     if (isOne(A))
@@ -479,7 +479,7 @@
                 break;
         if (noprimroot) {
             for(;f!=Lf.end();++f)
-                while (isZero(mod(tmp,g,*f)) && isOne(  this->powmod(tmp,A,  this->div(gg,g,*f),n) ) )
+                while (isZero(this->mod(tmp,g,*f)) && isOne(  this->powmod(tmp,A,  this->div(gg,g,*f),n) ) )
                     g = gg;
             return g;
         } else
@@ -497,12 +497,12 @@
 
 template<class RandIter>
 typename IntNumTheoDom<RandIter>::Rep& IntNumTheoDom<RandIter>::prim_elem(Rep& A, const Rep& n) const {
-    if (isleq(n,4)) { 
+    if (this->isleq(n,4)) { 
         Rep tmp; 
         return this->sub(A,n,this->one); 
     }
     
-    if (areEqual(n,8)) return init(A,2);
+    if (this->areEqual(n,8)) return this->init(A,2);
     return prim_base(A, n);
 }
 
@@ -521,8 +521,8 @@
     typename std::vector<Rep>::iterator a = Ra.begin() ;
     for( ;p!=Lp.end();++p, ++e, ++pe, ++a) {
         dom_power( *pe, *p, *e, *this);
-        if (areEqual(*p,2))
-            init(*a, 3);
+        if (this->areEqual(*p,2))
+            this->init(*a, 3);
         else
             prim_root(*a, *pe);
     }
@@ -549,13 +549,13 @@
 template<class RandIter>
 typename IntNumTheoDom<RandIter>::Rep& IntNumTheoDom<RandIter>::lambda_inv_primpow(Rep & z, const Rep& p, const unsigned long e) const {
         // Prerequisite : p prime.
-    if (areEqual(p, 2)) {
-        if (e<=2) return init(z,e);
-        if (e==3) return init(z,2);
+    if (this->areEqual(p, 2)) {
+        if (e<=2) return this->init(z,e);
+        if (e==3) return this->init(z,2);
         return dom_power(z, p, e-2, *this);
     } else {
         Rep tmp;
-        return mulin( dom_power(z, p, e-1, *this), sub(tmp, p, this->one) );
+        return this->mulin( dom_power(z, p, e-1, *this), this->sub(tmp, p, this->one) );
     }
 }
 
@@ -564,16 +564,16 @@
     
 template<class RandIter>
 typename IntNumTheoDom<RandIter>::Rep& IntNumTheoDom<RandIter>::lambda_inv(Rep & z, const Rep& m) const {
-        if (areEqual(m,2)) return init(z,1);
-        if (areEqual(m,3) || areEqual(m,4) || areEqual(m,8) ) return init(z,2);
+        if (this->areEqual(m,2)) return this->init(z,1);
+        if (this->areEqual(m,3) || this->areEqual(m,4) || this->areEqual(m,8) ) return this->init(z,2);
         return lambda_base(z, m);
 }
 
 template<class RandIter>
 typename IntNumTheoDom<RandIter>::Rep& IntNumTheoDom<RandIter>::lambda(Rep & z, const Rep& m) const {
-        if (areEqual(m,2)) return init(z,1);
-        if (areEqual(m,3) || areEqual(m,4)) return init(z,2);
-        if (areEqual(m,8) ) return init(z,3);
+        if (this->areEqual(m,2)) return this->init(z,1);
+        if (this->areEqual(m,3) || this->areEqual(m,4)) return this->init(z,2);
+        if (this->areEqual(m,8) ) return this->init(z,3);
         return lambda_base(z, m);
 }
 
@@ -597,7 +597,7 @@
 //            Rep g;
 //            gcd(g, z, tmp);
 //            mulin(z, this->divin(tmp, g));
-	    lcmin(z,tmp);
+	    this->lcmin(z,tmp);
         }
         
         return z;
diff -u -r givaro-3.2.16.orig/src/kernel/integer/givintrsa.inl givaro-3.2.16/src/kernel/integer/givintrsa.inl
--- givaro-3.2.16.orig/src/kernel/integer/givintrsa.inl	2012-08-16 12:54:05.172069495 +0300
+++ givaro-3.2.16/src/kernel/integer/givintrsa.inl	2012-08-16 13:32:59.225980556 +0300
@@ -200,14 +200,14 @@
         this->random(g,t,3); 
         this->random(g,s,3); 
     }
-    nextprimein( t );
-    nextprimein( s );
+    this->nextprimein( t );
+    this->nextprimein( s );
     
     
 
     r = t<<1;
     ++r;
-    while( ! isprime(r,4) ) {
+    while( ! this->isprime(r,4) ) {
         r += t<<1;
     }
 
@@ -226,7 +226,7 @@
     r <<= 1;
     
     p = q+r;
-    while( ! isprime(p,4) ) {
+    while( ! this->isprime(p,4) ) {
         p += r;
     }
 
@@ -257,21 +257,21 @@
     do  strong_prime(g, qsize, q); while (q == p);
     
 
-    Element phim; mul(phim, sub(d,p,IntFactorDom<RandIter>::one), sub(l,q,IntFactorDom<RandIter>::one));
-    mul(m, p, q);
+    Element phim; this->mul(phim, this->sub(d,p,IntFactorDom<RandIter>::one), this->sub(l,q,IntFactorDom<RandIter>::one));
+    this->mul(m, p, q);
 
     Element v, gd;
 
     if (_fast_impl) {
-        mod(k,SIMPLE_EXPONENT, phim);
+        this->mod(k,SIMPLE_EXPONENT, phim);
         this->gcd(gd,u,v,k,phim);
     } else {
         do {
             this->random(g,k,phim);
         } while (this->gcd(gd,u,v,k,phim) != 1);
     }
-    modin(u,phim);
-    if ( islt(u,IntFactorDom<RandIter>::zero) ) addin(u,phim);
+    this->modin(u,phim);
+    if ( this->islt(u,IntFactorDom<RandIter>::zero) ) this->addin(u,phim);
 }
 
 // =================================================================== //
@@ -281,10 +281,10 @@
 typename IntRSADom<RandIter>::Element& IntRSADom<RandIter>::point_break(Element& u) {
     if ( isZero(_d) ) {
         Element p,v,d, pm;
-        factor(p, _n);
-        mul(pm, sub(v,p,IntFactorDom<RandIter>::one), subin( this->div(d,_n,p), IntFactorDom<RandIter>::one ) );
+        this->factor(p, _n);
+        this->mul(pm, this->sub(v,p,IntFactorDom<RandIter>::one), this->subin( this->div(d,_n,p), IntFactorDom<RandIter>::one ) );
         this->gcd(d,_d,v,_e,pm);
-        if (islt(_d,IntFactorDom<RandIter>::zero)) addin(_d, pm);
+        if (this->islt(_d,IntFactorDom<RandIter>::zero)) this->addin(_d, pm);
     }
     return u = _d;
 }
diff -u -r givaro-3.2.16.orig/src/library/poly1/givpoly1factor.inl givaro-3.2.16/src/library/poly1/givpoly1factor.inl
--- givaro-3.2.16.orig/src/library/poly1/givpoly1factor.inl	2012-08-16 12:54:05.177069535 +0300
+++ givaro-3.2.16/src/library/poly1/givpoly1factor.inl	2012-08-16 13:32:59.254980785 +0300
@@ -29,7 +29,7 @@
     , Residu_t MOD) const {
 	typename Domain::Element one;
 	_domain.init(one, 1UL);
-    Degree dG;degree(dG,G);
+    Degree dG;this->degree(dG,G);
     if (dG == d)
         L.push_back(G);
     else {
@@ -37,7 +37,7 @@
         while (! splitted) {
             Rep tmp, G1;
             this->gcd(G1, G, this->random(_g, tmp, dG-1));
-            Degree dG1; degree(dG1,G1);
+            Degree dG1; this->degree(dG1,G1);
 // write(std::cerr << "SF rd: ", tmp) << std::endl;
 // write(std::cerr << "SF G1: ", G1) << std::endl;
             if ( dG1 != dG) {
@@ -49,8 +49,8 @@
                 Integer pp = (power(Integer(MOD), d.value()) - 1)/2;
 // std::cerr << "pp: " << pp << std::endl;
                 Rep tp, tp2, G2;
-                this->gcd(G2,G, sub(tp2, this->powmod(tp, tmp, pp, G) , one) );
-                Degree dG2; degree(dG2,G2);
+                this->gcd(G2,G, this->sub(tp2, this->powmod(tp, tmp, pp, G) , one) );
+                Degree dG2; this->degree(dG2,G2);
 // write(std::cerr << "SF t2: ", tp2) << std::endl;
 // write(std::cerr << "SF G2: ", G2) << std::endl;
                 if ( dG2 != dG) {
@@ -59,8 +59,8 @@
                         SplitFactor ( L, G2, d, MOD) ;
                     }
 // UNNECESSARY : ANYTHING FOUND BY G3 WOULD HAVE THE COFACTOR IN G2
-                     Rep G3; this->gcd(G3, G, add(tp2,tp,one) );
-                     Degree dG3; degree(dG3,G3);
+                     Rep G3; this->gcd(G3, G, this->add(tp2,tp,one) );
+                     Degree dG3; this->degree(dG3,G3);
 // write(std::cerr << "SF t3: ", tp2) << std::endl;
 // write(std::cerr << "SF G3: ", G3) << std::endl;
                      if (( dG3 != dG) && (dG3 > 0 )) {
@@ -138,21 +138,21 @@
 // write(std::cerr << "DD in: ", f) << std::endl;
     Rep W, D, P = f;
     Degree dP;
-    Rep Unit, G1; init(Unit, Degree(1), one);
+    Rep Unit, G1; this->init(Unit, Degree(1), one);
     W.copy(Unit);
-    degree(dP,P); Degree dPo = (dP/2);
+    this->degree(dP,P); Degree dPo = (dP/2);
     for(Degree dp = 1; dp <= dPo; ++dp) {
 // std::cerr << "DD degree: " << dp << std::endl;
         this->powmod(W, D.copy(W), MOD, P);
-        this->gcd (G1,sub(D,W,Unit), P) ;
-        Degree dG1; degree(dG1,G1);
+        this->gcd (G1,this->sub(D,W,Unit), P) ;
+        Degree dG1; this->degree(dG1,G1);
 // write(std::cerr << "DD found: ", G1) << ", of degree " << dG1 << std::endl;
         if ( dG1 > 0 ) {
             SplitFactor (L, G1, dp, MOD);
-            divin(P,G1);
+            this->divin(P,G1);
         }
     }
-    degree(dP,P);    
+    this->degree(dP,P);    
     if (dP > 0)
         L.push_back(P);
 // write(std::cerr << "DD: ", P) << std::endl;
@@ -170,10 +170,10 @@
 	       const Rep& P,
 	       Residu_t MOD)  const {
 // write(std::cerr << "CZ in: ", P) << std::endl;
-    Degree dp; degree(dp,P);
+    Degree dp; this->degree(dp,P);
     size_t nb=dp.value()+1; 
     Rep * g = new Rep[nb];
-    sqrfree(nb,g,P);
+    this->sqrfree(nb,g,P);
 // std::cerr << "CZ sqrfree: " << nb << std::endl;
     for(size_t i = 0; i<nb;++i) {
         size_t this_multiplicity = Lf.size();
@@ -205,17 +205,17 @@
         // Square free ?
    typename Domain::Element _one;
    _domain.init(_one,1UL); 
-   Rep W,D; this->gcd(W,diff(D,P),P);
+   Rep W,D; this->gcd(W,this->diff(D,P),P);
     Degree d, dP;
-    if (degree(d,W) > 0) return 0;
+    if (this->degree(d,W) > 0) return 0;
         // Distinct degree free ?
-    Rep Unit, G1; init(Unit, Degree(1), _one);
+    Rep Unit, G1; this->init(Unit, Degree(1), _one);
     W.copy(Unit);
-    degree(dP,P); Degree dPo = (dP/2);
+    this->degree(dP,P); Degree dPo = (dP/2);
     for(Degree dp = 1; dp <= dPo; ++dp) {
         this->powmod(W, D.copy(W), MOD, P);
-        this->gcd (G1, sub(D,W,Unit), P) ;
-        if ( degree(d,G1) > 0 ) return 0;
+        this->gcd (G1, this->sub(D,W,Unit), P) ;
+        if ( this->degree(d,G1) > 0 ) return 0;
     }
     return 1;
 }
diff -u -r givaro-3.2.16.orig/src/library/poly1/givpoly1padic.h givaro-3.2.16/src/library/poly1/givpoly1padic.h
--- givaro-3.2.16.orig/src/library/poly1/givpoly1padic.h	2012-08-16 12:54:05.177069535 +0300
+++ givaro-3.2.16/src/library/poly1/givpoly1padic.h	2012-08-16 13:32:53.172932398 +0300
@@ -111,11 +111,11 @@
             IntegerDom::divmod(iq, ir, E, q);
             radix(Q, iq, n-t);
             radix(P, ir, t);
-            Degree dp; degree(dp,P); ++dp;
+            Degree dp; this->degree(dp,P); ++dp;
             for(long i=t; dp<i; --i)
                 P.push_back(_domain.zero);
         P.insert(P.end(),Q.begin(),Q.end());
-        return setdegree(P);
+        return this->setdegree(P);
     } 
 
 
diff -u -r givaro-3.2.16.orig/src/library/poly1/givpoly1proot.inl givaro-3.2.16/src/library/poly1/givpoly1proot.inl
--- givaro-3.2.16.orig/src/library/poly1/givpoly1proot.inl	2012-08-16 12:54:05.177069535 +0300
+++ givaro-3.2.16/src/library/poly1/givpoly1proot.inl	2012-08-16 13:32:59.261980840 +0300
@@ -33,7 +33,7 @@
 
 template<class Domain, class Tag, class RandIter >
 inline typename Poly1FactorDom<Domain,Tag, RandIter>::Element& Poly1FactorDom<Domain,Tag, RandIter>::creux_random_irreducible (Element& R, Degree n) const {
-    init(R, n, _domain.one);
+    this->init(R, n, _domain.one);
     Residu_t MOD = _domain.residu();
 
         // Search for an irreducible BINOMIAL : X^n + a
@@ -102,9 +102,9 @@
 // ---------------------------------------------------------------
 template<class Domain, class Tag, class RandIter >
 inline typename Poly1FactorDom<Domain,Tag, RandIter>::Element& Poly1FactorDom<Domain,Tag, RandIter>::ixe_irreducible (Element& R, Degree n) const {
-    init(R, n, _domain.one);
+    this->init(R, n, _domain.one);
     Element IXE;
-    init(IXE,Degree(1),_domain.one);
+    this->init(IXE,Degree(1),_domain.one);
     Residu_t MOD = _domain.residu();
 
         // Search for an irreducible BINOMIAL : X^n + a
@@ -234,13 +234,13 @@
 template<class Domain, class Tag, class RandIter>
 bool Poly1FactorDom<Domain,Tag, RandIter>::is_prim_root( const Rep& P, const Rep& F)  const {
     bool isproot = 0;
-    Rep A, G; mod(A,P,F);
+    Rep A, G; this->mod(A,P,F);
     Degree d;
-    if ( degree(d, this->gcd(G,A,F)) == 0) {
+    if ( this->degree(d, this->gcd(G,A,F)) == 0) {
         Residu_t MOD = _domain.residu();
         IntFactorDom<> FD;
         IntFactorDom<>::Element IMOD( MOD ), q, qp;
-        degree(d,F);
+        this->degree(d,F);
 //         FD.pow(q ,IMOD, d.value());
 //         FD.sub(qp, q, FD.one);
         FD.subin( FD.pow(qp ,IMOD, d.value()) , FD.one);
